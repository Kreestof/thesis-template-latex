@Article{Sz√°rnyas2017,
	author="Sz{\'a}rnyas, G{\'a}bor
	and Izs{\'o}, Benedek
	and R{\'a}th, Istv{\'a}n
	and Varr{\'o}, D{\'a}niel",
	title="The Train Benchmark: cross-technology performance evaluation of continuous model queries",
	journal="Software {\&} Systems Modeling",
	year="2017",
	pages="1--29",
	abstract="In model-driven development of safety-critical systems (like automotive, avionics or railways), well-formedness of models is repeatedly validated in order to detect design flaws as early as possible. In many industrial tools, validation rules are still often implemented by a large amount of imperative model traversal code which makes those rule implementations complicated and hard to maintain. Additionally, as models are rapidly increasing in size and complexity, efficient execution of validation rules is challenging for the currently available tools. Checking well-formedness constraints can be captured by declarative queries over graph models, while model update operations can be specified as model transformations. This paper presents a benchmark for systematically assessing the scalability of validating and revalidating well-formedness constraints over large graph models. The benchmark defines well-formedness validation scenarios in the railway domain: a metamodel, an instance model generator and a set of well-formedness constraints captured by queries, fault injection and repair operations (imitating the work of systems engineers by model transformations). The benchmark focuses on the performance of query evaluation, i.e. its execution time and memory consumption, with a particular emphasis on reevaluation. We demonstrate that the benchmark can be adopted to various technologies and query engines, including modeling tools; relational, graph and semantic databases. The Train Benchmark is available as an open-source project with continuous builds from                 https://github.com/FTSRG/trainbenchmark                              .",
	issn="1619-1374",
	doi="10.1007/s10270-016-0571-8",
	url="http://dx.doi.org/10.1007/s10270-016-0571-8"
}

@misc{DBEnginesRanking,
	title = {DB-Engines Ranking},
	author = {solid IT},
	howpublished = {\url{https://db-engines.com/en/ranking}},
	year = {2017},
	month = {05},
}
@misc{EMF,
	title = {Eclipse Modeling Framework (EMF)},
	author = {The Eclipse Foundation},
	howpublished = {\url{http://www.eclipse.org/modeling/emf/}},
	year = {2017},
}
@misc{RDF4J,
	title = {RDF4J},
	author = {Eclipse RDF4J},
	howpublished = {\url{http://rdf4j.org/}},
}

@TechReport{Wood:14:RCA,
	author      = "David Wood and Markus Lanthaler and Richard Cyganiak",
	title       = "{RDF} 1.1 Concepts and Abstract Syntax",
	month       = feb,
	note        = "http://www.w3.org/TR/2014/REC-rdf11-concepts-20140225/",
	year        = "2014",
	bibsource   = "http://w2.syronex.com/jmr/w3c-biblio",
	type        = "{W3C} Recommendation",
	institution = "W3C",
}

@misc{Neo4JGraphDatabase,
	title = {What is a Graph Database?},
	author = {Neo Technology, Inc.},
	howpublished = {\url{https://neo4j.com/developer/graph-database/}},
	note = {Accessed: 2017-05-10},
}

@article{angles2008survey,
	title={Survey of graph database models},
	author={Angles, Renzo and Gutierrez, Claudio},
	journal={ACM Computing Surveys (CSUR)},
	volume={40},
	number={1},
	pages={1-18},
	year={2008},
	publisher={ACM},
}

@misc{MicrosoftTrinity,
	title = {Trinity},
	author = {Microsoft},
	howpublished = {\url{https://www.microsoft.com/en-us/research/project/trinity/}},
	note		= {Accessed: 2017-05-10},
}

@inproceedings{Trinity,
	author = {Shao, Bin and Wang, Haixun and Li, Yatao},
	title = {Trinity: A Distributed Graph Engine on a Memory Cloud},
	booktitle = {Proceedings of the 2013 ACM SIGMOD International Conference on Management of Data},
	series = {SIGMOD '13},
	year = {2013},
	isbn = {978-1-4503-2037-5},
	location = {New York, New York, USA},
	pages = {505--516},
	numpages = {12},
	url = {http://doi.acm.org/10.1145/2463676.2467799},
	doi = {10.1145/2463676.2467799},
	acmid = {2467799},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {distributed system, graph database, memory cloud},
} 



@misc{LINQ,
	title = {LINQ: .NET Language-Integrated Query},
	author = {Microsoft},
	howpublished = {\url{https://msdn.microsoft.com/en-us/library/bb308959.aspx}},
	note = {Accessed: 2017-05-10},
}

@misc{Lambda,
	title = {Lambda Expressions (C\# Programming Guide)},
	author = {Microsoft},
	howpublished = {\url{https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/statements-expressions-operators/lambda-expressions}},
	note = {Accessed: 2017-05-10},
}

@TechReport{Prud'hommeaux:14:RT,
	author      = "Eric Prud'hommeaux and Gavin Carothers",
	title       = "{RDF} 1.1 Turtle",
	month       = feb,
	note        = "http://www.w3.org/TR/2014/REC-turtle-20140225/",
	year        = "2014",
	bibsource   = "http://w2.syronex.com/jmr/w3c-biblio",
	type        = "{W3C} Recommendation",
	institution = "W3C",
}

@misc{Jena,
	title = {Apache Jena},
	author = {The Apache Software Foundation},
	howpublished = {\url{https://jena.apache.org/index.html}},
}

@misc{SemWeb,
	title = {SemWeb RDF Library for C\#},
	author = {joshdata},
	howpublished = {\url{https://joshdata.wordpress.com/2005/06/12/semweb-rdf-library-for-c/}},
	note = {2005-06-12},
}

@misc{RDFSharp,
	title = {RDFSharp},
	author = {Microsoft},
	howpublished = {\url{https://rdfsharp.codeplex.com/}},
	note = {Last edited: Nov 11, 2016},
}

@misc{dotNetRDF,
	title = {dotNetRDF},
	author = {dotNetRDF Project},
	howpublished = {\url{http://www.dotnetrdf.org/}},
	year = {2016},
}
@misc{cmdLimitation,
	title = {Command prompt (Cmd. exe) command-line string limitation},
	author = {Microsoft},
	howpublished = {\url{https://support.microsoft.com/hu-hu/help/830473/command-prompt-cmd.-exe-command-line-string-limitation}},
}

@article{pickametamodeling,
	title={Metamodeling and development of information systems},
	author={P{\'I}CKA, M},
}